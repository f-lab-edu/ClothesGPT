generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model users {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  image     String
  createdAt DateTime   @default(now())
  answers   answer[]
  chat      chat[]
  chatRoom  chatRoom[]
}

model chat {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String
  createdById Int
  createdBy   users    @relation(fields: [createdById], references: [id])
}

model chatRoom {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  title       String        @db.VarChar(250)
  createdById Int
  chatGptChat chatGptChat[]
  createdBy   users         @relation(fields: [createdById], references: [id])
}

model chatGptChat {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  content    String
  chatRoomId Int
  chatRoom   chatRoom @relation(fields: [chatRoomId], references: [id])
}

model survey {
  id       Int      @id @default(autoincrement())
  question String
  active   Boolean
  order    Int
  gender   String?
  answers  answer[]
  choices  choice[]
}

model choice {
  id       Int      @id @default(autoincrement())
  value    String
  type     String
  image    String?
  surveyId Int
  survey   survey   @relation(fields: [surveyId], references: [id])
  answers  answer[] @relation("answerTochoice")
}

model answer {
  id       Int      @id @default(autoincrement())
  userId   Int
  surveyId Int
  survey   survey   @relation(fields: [surveyId], references: [id])
  user     users    @relation(fields: [userId], references: [id])
  choices  choice[] @relation("answerTochoice")
}
